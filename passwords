import redis, bcrypt

#passwords should come from some function such as the below.

#password = request.form.get("password").encode("utf-8")
#password = "SuperSercet34".encode("utf-8")

#Define Redis Connection
RedisServer = "InsertServerFQDN"
RedisPort = 6379

#Define Password For Test
Password = "SuperSercetPassword"
encoded_password = Password.encode("utf-8")
#Define Username
Username = "exampleuser"
#Create Redis Connection
r = redis.Redis(host=RedisServer, port=RedisPort, db=0)

def enter_new_password(username=None, password=None):
    """
    This function imports a new password into the Redis Database in a hashed and salted format according to OWASP best practices.
    This calls for bcrypt to have 12 rounds when used for salting.
    """
    #create a salt with OWASP password storage cheat sheet best practices.
    usersalt = bcrypt.gensalt(12)
    #generate hashed password with salt
    hashed_password = bcrypt.hashpw(password, usersalt)
    r.hset("user:" + username, "password", hashed_password)

def check_existing_password(username=None, password=None):
    """
    This function checks the passwords entered with the password in the Redis Database.
    :param username: The username that comes from the form field of your choice.
    :param password: The passwords that comes from the form field of your choice.
    :return: Returns if the passwords match or not
    """
    stored_password = r.hget("user:" + username, "password")
    compare_password = bcrypt.hashpw(password, stored_password)
    try:
        if bcrypt.checkpw(password, stored_password) == True:
            print("Passwords Match! We will let you in")
        else:
            print("The username and password combo you entered do not exist")
    except:
        print("This developer was lazy and didn't try to define errors. This was only a demo.")
